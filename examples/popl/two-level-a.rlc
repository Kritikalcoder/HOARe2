(* Two-level counter *)
open list.List  in
open dp.DP      in
open extra.Math in

(* Positive epsilon *)
fun (eps : { eps : real | 0.0 <=. eps } )

    (* The laplacian primitive *)
    (lap : Pi (e : real)
              (x :: real).
               M [ e *. d_r x<1> x<2> ]
                 { r :: real | r<1> = r<2> })

    (* Verified in histrogram.rlc *)
    (histogram : Pi (l :: { x :: list real | adjacent x<1> x<2> } ).
                     M[ eps *. d_lr l<1> l<2>]
                      { r :: list real | r<1> = r<2> })
    (* "Pure" function *)
    (createsums : Pi (b :: list real) (h :: list real). list real)

    (* We assume chunksum here *)
    (chunksum : Pi (q    : int)
                   (togo : int)
                   (acc  : real)
                   (l :: {l :: list real | adjacent l<1> l<2>} ).
                   {r :: list real | adjacent r<1> r<2> /\
                                     d_lr r<1> r<2> <=. d_lr l<1> l<2>
                   })
->

(* Cut *)
let eq_v (x :: {x :: list real | x<1> = x<2>}) : {l :: list real | l<1> = l<2> } = x
in

let twolevel (q : int)
             (l :: {l :: list real | adjacent l<1> l<2>})
           :  M [ 2.0 *. eps *. d_lr l<1> l<2> ]
                {r :: list real | r<1> = r<2> } =

    mlet hist   = histogram l                       in
    mlet blocks = histogram (chunksum q q 0.0 l)    in

    munit (eq_v (createsums blocks hist))

in twolevel
